version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cdond-c3-projectstarter \
              --stack-name udapeople-frontend-kk1j287dhjppmz437 \
              --parameter-overrides ID=kk1j287dhjppmz437
              --parameters EnvParameter=prod              

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cdond-c3-projectstarter \
              --stack-name udapeople-backend-kk1j287dhjppmz437 \
              --parameter-overrides ID=kk1j287dhjppmz437
              --parameters EnvParameter=prod              

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt



  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [test-frontend/node_modules]
          key: test-frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [test-backend/node_modules]
          key: test-backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [scan-backend/node_modules]
          key: scan-backend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [scan-backend/node_modules]
          key: scan-backend-build

workflows:
  default:
      jobs:
        - build-frontend
        - build-backend
#        - test-frontend:
#            requires: [build-frontend]
        - test-backend:
            requires: [build-backend]
        - scan-backend:
            requires: [build-backend]
        - scan-frontend:
            requires: [build-frontend]

        - deploy-infrastructure:
            requires: [test-backend, scan-frontend, scan-backend]
#            filters:
#                branches:
#                    only: [test-feature-branch]